{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(tree:*)",
      "Bash(chmod:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(kill:*)",
      "Bash(for filekey in 66096 66097 66098 66099 66100 66101 66102 66103 66104 66106)",
      "Bash(do)",
      "Bash(echo \"üöÄ Downloading filekey: $filekey\")",
      "Bash(python:*)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(for filekey in 66107 66108 66109 66110 66111)",
      "Bash(for filekey in 66115 66117 66118 66119 66120)",
      "Bash(for filekey in 66132 66133 66134 66135 66136 66137 66139 66140 66141 66142 66143 66144 66145 66146 66147 66148 66150 66151)",
      "Bash(do echo \"üöÄ Downloading filekey: $filekey\")",
      "Bash(for i in {2..8})",
      "Bash(do echo \"=== TS_$i ÎπÑÍµê ===\")",
      "Bash(zip_file=\"/mnt/data/AIHub/166.ÏïΩÌíàÏãùÎ≥Ñ_Ïù∏Í≥µÏßÄÎä•_Í∞úÎ∞úÏùÑ_ÏúÑÌïú_Í≤ΩÍµ¨ÏïΩÏ†ú_Ïù¥ÎØ∏ÏßÄ_Îç∞Ïù¥ÌÑ∞/01.Îç∞Ïù¥ÌÑ∞/1.Training/ÏõêÏ≤úÎç∞Ïù¥ÌÑ∞/Í≤ΩÍµ¨ÏïΩÏ†úÏ°∞Ìï©_5000Ï¢Ö/TS_$i_Ï°∞Ìï©.zip\")",
      "Bash(combo_dir=\"/mnt/data/pillsnap_dataset/data/train/images/combination/TS_$i_combo\")",
      "Bash(test:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(export PILLSNAP_DATA_ROOT=\"/mnt/data/pillsnap_dataset/data\")",
      "Bash(/home/max16/pillsnap/.venv/bin/python -m pillsnap.stage1.verify:*)",
      "Bash(source:*)",
      "Bash($HOME/pillsnap/.venv/bin/python -m pillsnap.stage1.run:*)",
      "Bash($HOME/pillsnap/.venv/bin/python -m pytest tests/test_json_enrichment.py -v)",
      "Bash($HOME/pillsnap/.venv/bin/python -m pytest tests/test_json_enrichment.py::test_empty_dataframe_schema -v)",
      "Bash(PYTHONPATH=/home/max16/pillsnap $HOME/pillsnap/.venv/bin/python -m pillsnap.stage2.train_cls --manifest artifacts/manifest_enriched.csv --classes artifacts/classes_step11.json --epochs 1 --batch-size 8 --limit 32 --amp --outdir artifacts/cls_train_smoke)",
      "Bash(ls:*)",
      "Bash(bash:*)",
      "Bash(BACKUP_DIR=\"backup/cleanup_1755530906\")",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(/home/max16/pillsnap/.venv_gpu/bin/python --version)",
      "Bash(/home/max16/pillsnap/.venv_gpu/bin/python -c \"import torch; print(f''PyTorch: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}'')\")",
      "Bash(./scripts/python_safe.sh:*)",
      "Bash(cp:*)",
      "Bash(true)",
      "Bash(sudo mkdir:*)",
      "Bash(sudo chown:*)",
      "Bash(export PILLSNAP_DATA_ROOT=/home/max16/ssd_pillsnap/dataset)",
      "Bash(export PILLSNAP_DATA_ROOT=\"/home/max16/ssd_pillsnap/dataset\")",
      "WebSearch",
      "Bash(for ts in 21 34 44 54 71 80)",
      "Bash(do if [[ ! -d \"dataset/train/images/single/TS_$ts_single\" ]])",
      "Bash(then echo \"‚úÖ TS_$ts_single ÎàÑÎùΩ ÌôïÏù∏Îê®\")",
      "Bash(fi)",
      "Bash(md5sum:*)",
      "Bash(git add:*)",
      "Bash(for script in *.sh)",
      "Bash(do echo \"=== $script ===\")",
      "Bash(./scripts/monitoring/universal_training_monitor.sh:*)",
      "Bash(nvidia-smi:*)",
      "Bash(./scripts/monitoring/quick_status.sh:*)",
      "Read(//home/max16/pillsnap_data/**)",
      "Bash(strace:*)",
      "Bash(ss:*)",
      "Bash(curl:*)",
      "Bash(export PILLSNAP_DATA_ROOT=\"/home/max16/pillsnap_data\")",
      "Bash(/home/max16/pillsnap/.venv/bin/python scripts/test_detection_integration.py)",
      "Bash(pkill:*)",
      "Bash(git commit:*)",
      "Bash(sed:*)",
      "Bash(timeout:*)",
      "Bash(./run_all_fixes.sh:*)",
      "Bash(/home/max16/pillsnap/.venv/bin/python balance_combination_ratio.py --train-manifest artifacts/stage3/manifest_train.remove.csv --val-manifest artifacts/stage3/manifest_val.remove.csv --target-ratio 0.25 --strategy oversample --no-dry-run)",
      "Bash(pgrep:*)",
      "Bash(touch:*)",
      "Bash(/home/max16/pillsnap/.venv/bin/python -c \"import torch; ckpt = torch.load(''artifacts/stage3/checkpoints/stage3_classification_best.pt'', weights_only=False); print(''Keys:'', list(ckpt.keys())); print(''Epoch:'', ckpt.get(''epoch'')); print(''Best Top-1:'', ckpt.get(''best_top1'')); print(''Best Top-5:'', ckpt.get(''best_top5'')); print(''Accuracy:'', ckpt.get(''accuracy'')); print(''Top5 Accuracy:'', ckpt.get(''top5_accuracy''))\")",
      "Bash(/home/max16/pillsnap/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom src.training.train_stage3_two_stage import TwoStageTrainingConfig\nimport torch\n\nckpt = torch.load(''artifacts/stage3/checkpoints/stage3_classification_best.pt'', weights_only=False)\nprint(''Keys:'', list(ckpt.keys())[:10])\nprint(''Epoch:'', ckpt.get(''epoch''))\nprint(''Best Top-1:'', ckpt.get(''best_top1''))\nprint(''Best Top-5:'', ckpt.get(''best_top5''))\nprint(''Accuracy:'', ckpt.get(''accuracy''))\nprint(''Top5 Accuracy:'', ckpt.get(''top5_accuracy''))\n\nif ''model_state_dict'' in ckpt:\n    state_dict = ckpt[''model_state_dict'']\n    print(f''Model state dict keys (first 5): {list(state_dict.keys())[:5]}'')\n    print(f''Total keys in model_state_dict: {len(state_dict)}'')\n\")",
      "Bash(/home/max16/pillsnap/.venv/bin/python test_checkpoint_loading.py)",
      "Bash(/home/max16/pillsnap/.venv/bin/python scripts/sanity_check.py --eval-domain)",
      "Bash(/home/max16/pillsnap/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom src.training.train_stage3_two_stage import TwoStageTrainingConfig\nimport torch\n\nckpt = torch.load(''artifacts/stage3/checkpoints/stage3_classification_best.pt'', weights_only=False)\nprint(''=== Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏ ÌÇ§ Î™©Î°ù ==='')\nfor key in sorted(ckpt.keys()):\n    if key not in [''model_state_dict'', ''optimizer_state_dict'', ''scheduler_state_dict'']:\n        value = ckpt[key]\n        if isinstance(value, (int, float, str)):\n            print(f''{key}: {value}'')\n        elif isinstance(value, dict):\n            print(f''{key}: dict with {len(value)} keys'')\n            if len(value) < 10:\n                for k, v in list(value.items())[:5]:\n                    print(f''  {k}: {v}'')\n        elif isinstance(value, list):\n            print(f''{key}: list with {len(value)} items'')\n            if len(value) < 10:\n                print(f''  Sample: {value[:3]}'')\n        else:\n            print(f''{key}: {type(value).__name__}'')\n            \n# Config Ï†ïÎ≥¥ ÌôïÏù∏\nif ''config'' in ckpt:\n    print(''\\n=== Config Ï†ïÎ≥¥ ==='')\n    config = ckpt[''config'']\n    if hasattr(config, ''__dict__''):\n        for k, v in config.__dict__.items():\n            if ''manifest'' in k.lower() or ''class'' in k.lower():\n                print(f''config.{k}: {v}'')\n\")",
      "Bash(/home/max16/pillsnap/.venv/bin/python:*)",
      "Bash(git check-ignore:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/mnt/data/pillsnap_dataset",
      "/home/max16/pillsnap_data/exp/exp01/logs",
      "/tmp",
      "/"
    ]
  }
}