#!/usr/bin/env python3
"""
Step 3-4 Ïä§Î™®ÌÅ¨ ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏

Î™©Ï†Å: Ïã§Ï†ú config.yamlÏùò data.rootÏóêÏÑú ÏÜåÍ∑úÎ™® Ïä§Ï∫î ÌÖåÏä§Ìä∏
Ï£ºÏùò: ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞ÏÖã Í≥†Î†§ÌïòÏó¨ ÏµúÎåÄ 500Í∞ú ÌååÏùºÎßå ÏÉòÌîåÎßÅ
"""

import sys
from pathlib import Path

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º sys.pathÏóê Ï∂îÍ∞Ä
sys.path.insert(0, str(Path(__file__).parent))

from config import load_config
from dataset.scan import scan_dataset
import os

def limited_scan_dataset(root, image_exts, label_ext, max_files=500):
    """
    Ïä§Ï∫î ÏûëÏóÖÏùÑ ÏµúÎåÄ ÌååÏùº ÏàòÎ°ú Ï†úÌïúÌïòÎäî ÎûòÌçº Ìï®Ïàò
    """
    print(f"üîç Starting limited scan (max {max_files} files)...")
    
    # ÌååÏùº ÏàòÏßë Ï†úÌïúÏùÑ ÏúÑÌïú Ïπ¥Ïö¥ÌÑ∞
    file_count = 0
    
    # ÏõêÎ≥∏ os.walkÎ•º ÎåÄÏ≤¥ÌïòÎäî Ï†úÌïúÎêú Î≤ÑÏ†Ñ
    original_walk = os.walk
    
    def limited_walk(path):
        nonlocal file_count
        for dirpath, dirnames, filenames in original_walk(path):
            if file_count >= max_files:
                print(f"‚ö†Ô∏è  File limit ({max_files}) reached, stopping scan...")
                break
            
            # ÌååÏùº Ïàò Ï†úÌïú
            limited_filenames = filenames[:max(1, max_files - file_count)]
            file_count += len(limited_filenames)
            
            yield dirpath, dirnames, limited_filenames
    
    # ÏûÑÏãúÎ°ú os.walk ÍµêÏ≤¥
    os.walk = limited_walk
    
    try:
        result = scan_dataset(root, image_exts, label_ext)
        return result
    finally:
        # ÏõêÎ≥∏ os.walk Î≥µÏõê
        os.walk = original_walk


def main():
    print("=== PillSnap Dataset Scan Smoke Test ===")
    print()
    
    # 1. ÏÑ§Ï†ï Î°úÎìú
    print("üìã Loading configuration...")
    try:
        cfg = load_config()
        print(f"‚úÖ Config loaded successfully")
        print(f"   data.root: {cfg.data.root}")
        print(f"   pipeline_mode: {cfg.data.pipeline_mode}")
        print(f"   default_mode: {cfg.data.default_mode}")
        print(f"   image_exts: {cfg.data.image_exts}")
        print(f"   label_ext: {cfg.data.label_ext}")
    except Exception as e:
        print(f"‚ùå Failed to load config: {e}")
        return 1
    
    print()
    
    # 2. Í≤ΩÎ°ú Ï°¥Ïû¨ ÌôïÏù∏
    data_root = Path(cfg.data.root)
    if not data_root.exists():
        print(f"‚ùå Data root does not exist: {data_root}")
        return 1
    
    print(f"üìÅ Data root exists: {data_root}")
    
    # 3. Ï†úÌïúÎêú Ïä§Ï∫î Ïã§Ìñâ
    print()
    print("üöÄ Starting smoke test scan...")
    try:
        df, stats = limited_scan_dataset(
            root=cfg.data.root,
            image_exts=cfg.data.image_exts,
            label_ext=cfg.data.label_ext,
            max_files=500
        )
        
        print("‚úÖ Scan completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Scan failed: {e}")
        return 1
    
    # 4. Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•
    print()
    print("üìä Scan Results Summary:")
    print("-" * 40)
    for key, value in stats.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.3f}")
        else:
            print(f"   {key}: {value}")
    
    # 5. DataFrame ÏÉòÌîå Ï∂úÎ†• (ÏµúÎåÄ 5Í∞ú)
    print()
    print("üìã Sample Data (max 5 rows):")
    print("-" * 40)
    if len(df) > 0:
        sample_df = df.head(5)
        for idx, row in sample_df.iterrows():
            img_name = Path(row['image_path']).name if row['image_path'] else "None"
            lbl_name = Path(row['label_path']).name if row['label_path'] else "None"
            pair_status = "‚úÖ" if row['is_pair'] else "‚ùå"
            print(f"   {pair_status} {row['code']}: {img_name} + {lbl_name}")
    else:
        print("   (No data found)")
    
    print()
    print("‚úÖ Smoke test completed successfully!")
    return 0


if __name__ == "__main__":
    exit(main())